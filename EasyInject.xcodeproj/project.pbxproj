// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 46;
	objects = {

/* Begin PBXAggregateTarget section */
		"EasyInject::EasyInjectPackageTests::ProductTarget" /* EasyInjectPackageTests */ = {
			isa = PBXAggregateTarget;
			buildConfigurationList = OBJ_81 /* Build configuration list for PBXAggregateTarget "EasyInjectPackageTests" */;
			buildPhases = (
			);
			dependencies = (
				OBJ_84 /* PBXTargetDependency */,
			);
			name = EasyInjectPackageTests;
			productName = EasyInjectPackageTests;
		};
/* End PBXAggregateTarget section */

/* Begin PBXBuildFile section */
		OBJ_43 /* Package.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_6 /* Package.swift */; };
		OBJ_49 /* AnyInjectorTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_21 /* AnyInjectorTests.swift */; };
		OBJ_50 /* AnyMutableInjectorTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_22 /* AnyMutableInjectorTests.swift */; };
		OBJ_51 /* ComposedInjectorTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_23 /* ComposedInjectorTests.swift */; };
		OBJ_52 /* EasyInjectTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_24 /* EasyInjectTests.swift */; };
		OBJ_53 /* GenericProvidableKeyTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_25 /* GenericProvidableKeyTests.swift */; };
		OBJ_54 /* GlobalInjectorTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_26 /* GlobalInjectorTests.swift */; };
		OBJ_55 /* InjectionErrorTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_27 /* InjectionErrorTests.swift */; };
		OBJ_56 /* InjectorTestCase.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_28 /* InjectorTestCase.swift */; };
		OBJ_57 /* LazyInjectorTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_29 /* LazyInjectorTests.swift */; };
		OBJ_58 /* MutableInjectorTestCase.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_30 /* MutableInjectorTestCase.swift */; };
		OBJ_59 /* StrictInjectorTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_31 /* StrictInjectorTests.swift */; };
		OBJ_61 /* EasyInject.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = "EasyInject::EasyInject::Product" /* EasyInject.framework */; };
		OBJ_68 /* AnyInjector.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_8 /* AnyInjector.swift */; };
		OBJ_69 /* ComposedInjector.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_9 /* ComposedInjector.swift */; };
		OBJ_70 /* Core.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_10 /* Core.swift */; };
		OBJ_71 /* CoreExtensions.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_11 /* CoreExtensions.swift */; };
		OBJ_72 /* Extensions.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_12 /* Extensions.swift */; };
		OBJ_73 /* GenericProvidableKey.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_13 /* GenericProvidableKey.swift */; };
		OBJ_74 /* GlobalInjector.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_14 /* GlobalInjector.swift */; };
		OBJ_75 /* LazilyInjectedProvider.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_15 /* LazilyInjectedProvider.swift */; };
		OBJ_76 /* LazyInjector.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_16 /* LazyInjector.swift */; };
		OBJ_77 /* StrictInjector.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_17 /* StrictInjector.swift */; };
		OBJ_78 /* StrictlyInjectedProvider.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_18 /* StrictlyInjectedProvider.swift */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		BA0F5F2C1F88108300B3750F /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = OBJ_1 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = "EasyInject::EasyInject";
			remoteInfo = EasyInject;
		};
		BA0F5F2D1F88108300B3750F /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = OBJ_1 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = "EasyInject::EasyInjectTests";
			remoteInfo = EasyInjectTests;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXFileReference section */
		"EasyInject::EasyInject::Product" /* EasyInject.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; path = EasyInject.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		"EasyInject::EasyInjectTests::Product" /* EasyInjectTests.xctest */ = {isa = PBXFileReference; lastKnownFileType = file; path = EasyInjectTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		OBJ_10 /* Core.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Core.swift; sourceTree = "<group>"; };
		OBJ_11 /* CoreExtensions.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = CoreExtensions.swift; sourceTree = "<group>"; };
		OBJ_12 /* Extensions.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Extensions.swift; sourceTree = "<group>"; };
		OBJ_13 /* GenericProvidableKey.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = GenericProvidableKey.swift; sourceTree = "<group>"; };
		OBJ_14 /* GlobalInjector.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = GlobalInjector.swift; sourceTree = "<group>"; };
		OBJ_15 /* LazilyInjectedProvider.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = LazilyInjectedProvider.swift; sourceTree = "<group>"; };
		OBJ_16 /* LazyInjector.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = LazyInjector.swift; sourceTree = "<group>"; };
		OBJ_17 /* StrictInjector.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = StrictInjector.swift; sourceTree = "<group>"; };
		OBJ_18 /* StrictlyInjectedProvider.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = StrictlyInjectedProvider.swift; sourceTree = "<group>"; };
		OBJ_21 /* AnyInjectorTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = AnyInjectorTests.swift; sourceTree = "<group>"; };
		OBJ_22 /* AnyMutableInjectorTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = AnyMutableInjectorTests.swift; sourceTree = "<group>"; };
		OBJ_23 /* ComposedInjectorTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ComposedInjectorTests.swift; sourceTree = "<group>"; };
		OBJ_24 /* EasyInjectTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = EasyInjectTests.swift; sourceTree = "<group>"; };
		OBJ_25 /* GenericProvidableKeyTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = GenericProvidableKeyTests.swift; sourceTree = "<group>"; };
		OBJ_26 /* GlobalInjectorTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = GlobalInjectorTests.swift; sourceTree = "<group>"; };
		OBJ_27 /* InjectionErrorTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = InjectionErrorTests.swift; sourceTree = "<group>"; };
		OBJ_28 /* InjectorTestCase.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = InjectorTestCase.swift; sourceTree = "<group>"; };
		OBJ_29 /* LazyInjectorTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = LazyInjectorTests.swift; sourceTree = "<group>"; };
		OBJ_30 /* MutableInjectorTestCase.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MutableInjectorTestCase.swift; sourceTree = "<group>"; };
		OBJ_31 /* StrictInjectorTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = StrictInjectorTests.swift; sourceTree = "<group>"; };
		OBJ_32 /* Guides */ = {isa = PBXFileReference; lastKnownFileType = folder; path = Guides; sourceTree = SOURCE_ROOT; };
		OBJ_33 /* docs */ = {isa = PBXFileReference; lastKnownFileType = folder; path = docs; sourceTree = SOURCE_ROOT; };
		OBJ_34 /* EasyInject.xcworkspace */ = {isa = PBXFileReference; lastKnownFileType = wrapper.workspace; path = EasyInject.xcworkspace; sourceTree = SOURCE_ROOT; };
		OBJ_6 /* Package.swift */ = {isa = PBXFileReference; explicitFileType = sourcecode.swift; path = Package.swift; sourceTree = "<group>"; };
		OBJ_8 /* AnyInjector.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = AnyInjector.swift; sourceTree = "<group>"; };
		OBJ_9 /* ComposedInjector.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ComposedInjector.swift; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		OBJ_60 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 0;
			files = (
				OBJ_61 /* EasyInject.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		OBJ_79 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		OBJ_19 /* Tests */ = {
			isa = PBXGroup;
			children = (
				OBJ_20 /* EasyInjectTests */,
			);
			name = Tests;
			sourceTree = SOURCE_ROOT;
		};
		OBJ_20 /* EasyInjectTests */ = {
			isa = PBXGroup;
			children = (
				OBJ_21 /* AnyInjectorTests.swift */,
				OBJ_22 /* AnyMutableInjectorTests.swift */,
				OBJ_23 /* ComposedInjectorTests.swift */,
				OBJ_24 /* EasyInjectTests.swift */,
				OBJ_25 /* GenericProvidableKeyTests.swift */,
				OBJ_26 /* GlobalInjectorTests.swift */,
				OBJ_27 /* InjectionErrorTests.swift */,
				OBJ_28 /* InjectorTestCase.swift */,
				OBJ_29 /* LazyInjectorTests.swift */,
				OBJ_30 /* MutableInjectorTestCase.swift */,
				OBJ_31 /* StrictInjectorTests.swift */,
			);
			name = EasyInjectTests;
			path = Tests/EasyInjectTests;
			sourceTree = SOURCE_ROOT;
		};
		OBJ_35 /* Products */ = {
			isa = PBXGroup;
			children = (
				"EasyInject::EasyInjectTests::Product" /* EasyInjectTests.xctest */,
				"EasyInject::EasyInject::Product" /* EasyInject.framework */,
			);
			name = Products;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		OBJ_5 /*  */ = {
			isa = PBXGroup;
			children = (
				OBJ_6 /* Package.swift */,
				OBJ_7 /* Sources */,
				OBJ_19 /* Tests */,
				OBJ_32 /* Guides */,
				OBJ_33 /* docs */,
				OBJ_34 /* EasyInject.xcworkspace */,
				OBJ_35 /* Products */,
			);
			name = "";
			sourceTree = "<group>";
		};
		OBJ_7 /* Sources */ = {
			isa = PBXGroup;
			children = (
				OBJ_8 /* AnyInjector.swift */,
				OBJ_9 /* ComposedInjector.swift */,
				OBJ_10 /* Core.swift */,
				OBJ_11 /* CoreExtensions.swift */,
				OBJ_12 /* Extensions.swift */,
				OBJ_13 /* GenericProvidableKey.swift */,
				OBJ_14 /* GlobalInjector.swift */,
				OBJ_15 /* LazilyInjectedProvider.swift */,
				OBJ_16 /* LazyInjector.swift */,
				OBJ_17 /* StrictInjector.swift */,
				OBJ_18 /* StrictlyInjectedProvider.swift */,
			);
			path = Sources;
			sourceTree = SOURCE_ROOT;
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		"EasyInject::EasyInject" /* EasyInject */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = OBJ_64 /* Build configuration list for PBXNativeTarget "EasyInject" */;
			buildPhases = (
				OBJ_67 /* Sources */,
				OBJ_79 /* Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = EasyInject;
			productName = EasyInject;
			productReference = "EasyInject::EasyInject::Product" /* EasyInject.framework */;
			productType = "com.apple.product-type.framework";
		};
		"EasyInject::EasyInjectTests" /* EasyInjectTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = OBJ_45 /* Build configuration list for PBXNativeTarget "EasyInjectTests" */;
			buildPhases = (
				OBJ_48 /* Sources */,
				OBJ_60 /* Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
				OBJ_62 /* PBXTargetDependency */,
			);
			name = EasyInjectTests;
			productName = EasyInjectTests;
			productReference = "EasyInject::EasyInjectTests::Product" /* EasyInjectTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		"EasyInject::SwiftPMPackageDescription" /* EasyInjectPackageDescription */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = OBJ_39 /* Build configuration list for PBXNativeTarget "EasyInjectPackageDescription" */;
			buildPhases = (
				OBJ_42 /* Sources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = EasyInjectPackageDescription;
			productName = EasyInjectPackageDescription;
			productType = "com.apple.product-type.framework";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		OBJ_1 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 9999;
			};
			buildConfigurationList = OBJ_2 /* Build configuration list for PBXProject "EasyInject" */;
			compatibilityVersion = "Xcode 3.2";
			developmentRegion = English;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
			);
			mainGroup = OBJ_5 /*  */;
			productRefGroup = OBJ_35 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				"EasyInject::SwiftPMPackageDescription" /* EasyInjectPackageDescription */,
				"EasyInject::EasyInjectTests" /* EasyInjectTests */,
				"EasyInject::EasyInject" /* EasyInject */,
				"EasyInject::EasyInjectPackageTests::ProductTarget" /* EasyInjectPackageTests */,
			);
		};
/* End PBXProject section */

/* Begin PBXSourcesBuildPhase section */
		OBJ_42 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 0;
			files = (
				OBJ_43 /* Package.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		OBJ_48 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 0;
			files = (
				OBJ_49 /* AnyInjectorTests.swift in Sources */,
				OBJ_50 /* AnyMutableInjectorTests.swift in Sources */,
				OBJ_51 /* ComposedInjectorTests.swift in Sources */,
				OBJ_52 /* EasyInjectTests.swift in Sources */,
				OBJ_53 /* GenericProvidableKeyTests.swift in Sources */,
				OBJ_54 /* GlobalInjectorTests.swift in Sources */,
				OBJ_55 /* InjectionErrorTests.swift in Sources */,
				OBJ_56 /* InjectorTestCase.swift in Sources */,
				OBJ_57 /* LazyInjectorTests.swift in Sources */,
				OBJ_58 /* MutableInjectorTestCase.swift in Sources */,
				OBJ_59 /* StrictInjectorTests.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		OBJ_67 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 0;
			files = (
				OBJ_68 /* AnyInjector.swift in Sources */,
				OBJ_69 /* ComposedInjector.swift in Sources */,
				OBJ_70 /* Core.swift in Sources */,
				OBJ_71 /* CoreExtensions.swift in Sources */,
				OBJ_72 /* Extensions.swift in Sources */,
				OBJ_73 /* GenericProvidableKey.swift in Sources */,
				OBJ_74 /* GlobalInjector.swift in Sources */,
				OBJ_75 /* LazilyInjectedProvider.swift in Sources */,
				OBJ_76 /* LazyInjector.swift in Sources */,
				OBJ_77 /* StrictInjector.swift in Sources */,
				OBJ_78 /* StrictlyInjectedProvider.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		OBJ_62 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = "EasyInject::EasyInject" /* EasyInject */;
			targetProxy = BA0F5F2C1F88108300B3750F /* PBXContainerItemProxy */;
		};
		OBJ_84 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = "EasyInject::EasyInjectTests" /* EasyInjectTests */;
			targetProxy = BA0F5F2D1F88108300B3750F /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin XCBuildConfiguration section */
		OBJ_3 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CLANG_ENABLE_OBJC_ARC = YES;
				COMBINE_HIDPI_IMAGES = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				DYLIB_INSTALL_NAME_BASE = "@rpath";
				ENABLE_NS_ASSERTIONS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				MACOSX_DEPLOYMENT_TARGET = 10.10;
				ONLY_ACTIVE_ARCH = YES;
				OTHER_SWIFT_FLAGS = "-DXcode";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SDKROOT = macosx;
				SUPPORTED_PLATFORMS = "macosx iphoneos iphonesimulator appletvos appletvsimulator watchos watchsimulator";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = SWIFT_PACKAGE;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				USE_HEADERMAP = NO;
			};
			name = Debug;
		};
		OBJ_4 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CLANG_ENABLE_OBJC_ARC = YES;
				COMBINE_HIDPI_IMAGES = YES;
				COPY_PHASE_STRIP = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				DYLIB_INSTALL_NAME_BASE = "@rpath";
				GCC_OPTIMIZATION_LEVEL = s;
				MACOSX_DEPLOYMENT_TARGET = 10.10;
				OTHER_SWIFT_FLAGS = "-DXcode";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SDKROOT = macosx;
				SUPPORTED_PLATFORMS = "macosx iphoneos iphonesimulator appletvos appletvsimulator watchos watchsimulator";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = SWIFT_PACKAGE;
				SWIFT_OPTIMIZATION_LEVEL = "-Owholemodule";
				USE_HEADERMAP = NO;
			};
			name = Release;
		};
		OBJ_40 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				LD = /usr/bin/true;
				OTHER_SWIFT_FLAGS = "-swift-version 3 -I /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/pm/3 -target x86_64-apple-macosx10.10 -sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk";
				SWIFT_VERSION = 3.0;
			};
			name = Debug;
		};
		OBJ_41 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				LD = /usr/bin/true;
				OTHER_SWIFT_FLAGS = "-swift-version 3 -I /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/pm/3 -target x86_64-apple-macosx10.10 -sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk";
				SWIFT_VERSION = 3.0;
			};
			name = Release;
		};
		OBJ_46 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				EMBEDDED_CONTENT_CONTAINS_SWIFT = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
				);
				HEADER_SEARCH_PATHS = "$(inherited)";
				INFOPLIST_FILE = EasyInject.xcodeproj/EasyInjectTests_Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "@loader_path/../Frameworks @loader_path/Frameworks";
				OTHER_LDFLAGS = "$(inherited)";
				OTHER_SWIFT_FLAGS = "$(inherited)";
				SWIFT_VERSION = 3.0;
				TARGET_NAME = EasyInjectTests;
			};
			name = Debug;
		};
		OBJ_47 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				EMBEDDED_CONTENT_CONTAINS_SWIFT = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
				);
				HEADER_SEARCH_PATHS = "$(inherited)";
				INFOPLIST_FILE = EasyInject.xcodeproj/EasyInjectTests_Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "@loader_path/../Frameworks @loader_path/Frameworks";
				OTHER_LDFLAGS = "$(inherited)";
				OTHER_SWIFT_FLAGS = "$(inherited)";
				SWIFT_VERSION = 3.0;
				TARGET_NAME = EasyInjectTests;
			};
			name = Release;
		};
		OBJ_65 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ENABLE_TESTABILITY = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
				);
				HEADER_SEARCH_PATHS = "$(inherited)";
				INFOPLIST_FILE = EasyInject.xcodeproj/EasyInject_Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "$(TOOLCHAIN_DIR)/usr/lib/swift/macosx";
				OTHER_LDFLAGS = "$(inherited)";
				OTHER_SWIFT_FLAGS = "$(inherited)";
				PRODUCT_BUNDLE_IDENTIFIER = EasyInject;
				PRODUCT_MODULE_NAME = "$(TARGET_NAME:c99extidentifier)";
				PRODUCT_NAME = "$(TARGET_NAME:c99extidentifier)";
				SKIP_INSTALL = YES;
				SWIFT_VERSION = 3.0;
				TARGET_NAME = EasyInject;
			};
			name = Debug;
		};
		OBJ_66 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ENABLE_TESTABILITY = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
				);
				HEADER_SEARCH_PATHS = "$(inherited)";
				INFOPLIST_FILE = EasyInject.xcodeproj/EasyInject_Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "$(TOOLCHAIN_DIR)/usr/lib/swift/macosx";
				OTHER_LDFLAGS = "$(inherited)";
				OTHER_SWIFT_FLAGS = "$(inherited)";
				PRODUCT_BUNDLE_IDENTIFIER = EasyInject;
				PRODUCT_MODULE_NAME = "$(TARGET_NAME:c99extidentifier)";
				PRODUCT_NAME = "$(TARGET_NAME:c99extidentifier)";
				SKIP_INSTALL = YES;
				SWIFT_VERSION = 3.0;
				TARGET_NAME = EasyInject;
			};
			name = Release;
		};
		OBJ_82 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
			};
			name = Debug;
		};
		OBJ_83 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		OBJ_2 /* Build configuration list for PBXProject "EasyInject" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_3 /* Debug */,
				OBJ_4 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Debug;
		};
		OBJ_39 /* Build configuration list for PBXNativeTarget "EasyInjectPackageDescription" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_40 /* Debug */,
				OBJ_41 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Debug;
		};
		OBJ_45 /* Build configuration list for PBXNativeTarget "EasyInjectTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_46 /* Debug */,
				OBJ_47 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Debug;
		};
		OBJ_64 /* Build configuration list for PBXNativeTarget "EasyInject" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_65 /* Debug */,
				OBJ_66 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Debug;
		};
		OBJ_81 /* Build configuration list for PBXAggregateTarget "EasyInjectPackageTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_82 /* Debug */,
				OBJ_83 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Debug;
		};
/* End XCConfigurationList section */
	};
	rootObject = OBJ_1 /* Project object */;
}
